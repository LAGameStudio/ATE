#pragma once
#include "Vertex.h"
#include "GLSetup.h"
#include "GLSL2Shader.h"
#include "TextureLibrary.h"

void ShadedStarNest( GLuint *sampler, float time, float pos_x, float pos_y, float res_x, float res_y );        // requires you to disable
void ShadedStarNest2( GLuint *sampler, float time, float pos_x, float pos_y, float res_x, float res_y );       // requires you to disable
void ShadedStarNestSimple( GLuint *sampler, float time, float pos_x, float pos_y, float res_x, float res_y );  // requires you to disable
void ShadedStarNestSimple2( GLuint *sampler, float time, float pos_x, float pos_y, float res_x, float res_y ); // requires you to disable

void ShadedStarNest( GLuint *sampler, float time, float pos_x, float pos_y, float res_x, float res_y, FBOColor *out );        // draws to FBO
void ShadedStarNest2( GLuint *sampler, float time, float pos_x, float pos_y, float res_x, float res_y, FBOColor *out );       // draws to FBO
void ShadedStarNestSimple( GLuint *sampler, float time, float pos_x, float pos_y, float res_x, float res_y, FBOColor *out );  // draws to FBO
void ShadedStarNestSimple2( GLuint *sampler, float time, float pos_x, float pos_y, float res_x, float res_y, FBOColor *out ); // draws to FBO

// Star Nest by Pablo Romn Andrioli
// Modified a lot.
// This content is under the MIT License.

class StarNestShader : public GLSLShader {
public:
 GLuint *pTex; // Input, background
 Zfloat time;
 Vertex position,resolution;
 GLuint Utime,Uposition,Uresolution,Utex;
 StarNestShader() : GLSLShader() {
  pTex=null;
  resolution.Set(1.0,1.0);
 }
 void Init() {
  OUTPUT("StarNestShader::Loading\n");
 // Simple passthrough vertex shader
  string vert=
    string("#version 120\n")
   +string("#ifdef GL_ES\n")
   +string("precision highp float;\n")  //  string("//precision mediump float;\n")
   +string("#endif\n")
   +string("varying vec2 v_vTexcoord;\n")
   +string("varying vec4 v_vColour;\n")
   +string("uniform sampler2D tex;\n")
   +string("")
   +string("void main() {\n")
   +string(" gl_Position = ftransform();\n")
   +string(" gl_TexCoord[0]=gl_MultiTexCoord0;\n")
   +string(" v_vColour = gl_Color;\n")
   +string(" v_vTexcoord = gl_TexCoord[0].st;\n")
   +string("}\n")
  ;
  string frag=
    string("#version 120\n")
   +string("#ifdef GL_ES\n")
   +string("precision highp float;\n")  //  string("//precision mediump float;\n")
   +string("#endif\n")
   +string("varying vec2 v_vTexcoord;\n")
   +string("varying vec4 v_vColour;\n")
   +string("uniform float time;\n")
   +string("uniform vec2 mouse;\n")
   +string("uniform vec2 resolution;\n")
   +string("uniform sampler2D tex;\n")
   +string("//const float  iterations= 15;\n")
   +string("const float  formuparam= 0.53;\n")
   +string("//const float  volsteps= 18;\n")
   +string("const float  stepsize= 0.120;\n")
   +string("const float  zoom=   0.8;//0.990;\n")
   +string("const float  tile=   0.85;\n")
   +string("const float  speed=  0.0001;\n")
   +string("const float  brightness= 0.0015;\n")
   +string("const float  darkmatter= 0.400;\n")
   +string("const float  distfading= 0.760;\n")
   +string("const float  saturation= 0.800;\n")
   +string("void main(void) {\n")
   +string(" //get coords and direction\n")
   +string(" vec2 uv=v_vTexcoord.xy/resolution.xy-0.5;\n")
   +string(" uv.y*=resolution.y/resolution.x;\n")
   +string(" vec3 dir=vec3(uv*zoom,1.0);\n")
   +string(" float a2=time*speed+.25;\n")
   +string(" float a1=0.0;\n")
   +string(" mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n")
   +string(" mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n")
   +string(" dir.xz*=rot1;\n")
   +string(" dir.xy*=rot2;\n")
   +string(" //from.x-=time;\n")
   +string(" //mouse movement\n")
   +string(" vec3 from=vec3(0.0,0.0,0.0);\n")
   +string(" //from+=vec3(time*2.,time,-2.);\n")
   +string(" from.x-=mouse.x;\n")
   +string(" from.y-=mouse.y;\n")
   +string(" from.xz*=rot1;\n")
   +string(" from.xy*=rot2;\n")
   +string(" //volumetric rendering\n")
   +string(" float _s=0.1,fade=1.0;\n")
   +string(" vec3 v=vec3(0.0);\n")
   +string(" vec3 _p=vec3(0.0);\n")
   +string(" float pa=0.0;\n")
   +string(" float _a=0.0;\n")
   +string(" float dm=0.0;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("    _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*0.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time/10.0))*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time))*fade; fade*=distfading; _s+=stepsize;\n")
   +string(" v=mix(vec3(length(v)),v,saturation); //color adjust\n")
   +string(" gl_FragColor = v_vColour * vec4(v*0.01,texture2D(tex,v_vTexcoord).a); \n")
   +string("}\n")
  ;
  loadShaders(vert.c_str(),frag.c_str());
  InitUniforms();
 } 
 void InitUniforms() {
  Utime=glGetUniformLocation(program, "time");
  Uposition=glGetUniformLocation(program, "mouse");
  Uresolution=glGetUniformLocation(program,"resolution");
  Utex=glGetUniformLocation(program,"tex");
 }
 void UpdateUniforms() {
  glUseProgram(program);
  glUniform1f(Utime, (GLfloat) time.value);
  glUniform2f(Uposition,position.x,position.y);
  glUniform2f(Uresolution,resolution.x,resolution.y);
  // Assign texture IDs used by glActiveTexture
  glUniform1i(Utex, 0);  glActiveTexture(GL_TEXTURE0);	 glBindTexture(GL_TEXTURE_2D, *pTex);
 }
 void Disable() {
  glBindTexture(GL_TEXTURE_2D, 0);
  glUseProgram(0);
 }
};



class StarNest2Shader : public GLSLShader {
public:
 GLuint *pTex; // Input, background
 Zfloat time;
 Vertex position,resolution;
 GLuint Utime,Uposition,Uresolution,Utex;
 void Init() {
  OUTPUT("StarNest2Shader::Loading\n");
 // Simple passthrough vertex shader
  string vert=
    string("#version 120\n")
   +string("#ifdef GL_ES\n")
   +string("precision highp float;\n")  //  string("//precision mediump float;\n")
   +string("#endif\n")
   +string("varying vec2 v_vTexcoord;\n")
   +string("varying vec4 v_vColour;\n")
   +string("uniform sampler2D tex;\n")
   +string("")
   +string("void main() {\n")
   +string(" gl_Position = ftransform();\n")
   +string(" gl_TexCoord[0]=gl_MultiTexCoord0;\n")
   +string(" v_vColour = gl_Color;\n")
   +string(" v_vTexcoord = gl_TexCoord[0].st;\n")
   +string("}\n")
  ;
  string frag=
    string("#version 120\n")
   +string("#ifdef GL_ES\n")
   +string("precision highp float;\n")  //  string("//precision mediump float;\n")
   +string("#endif\n")
   +string("varying vec2 v_vTexcoord;\n")
   +string("varying vec4 v_vColour;\n")
   +string("uniform float time;\n")
   +string("uniform vec2 mouse;\n")
   +string("uniform vec2 resolution;\n")
   +string("uniform sampler2D tex;\n")
   +string("const float  formuparam= 0.530;\n")
   +string("const float  stepsize= 0.120;\n")
   +string("const float  zoom=   1.0;//0.990;\n")
   +string("const float  tile=   0.850;\n")
   +string("const float  speed=  0.0001;\n")
   +string("const float  brightness= 0.0015;\n")
   +string("const float  darkmatter= 0.400;\n")
   +string("const float  distfading= 0.760;\n")
   +string("const float  saturation= 0.800;\n")
   +string("void main(void) {\n")
   +string(" //get coords and direction\n")
   +string(" vec2 uv=v_vTexcoord.xy/resolution.xy-0.5;\n")
   +string(" uv.y*=resolution.y/resolution.x;\n")
   +string(" vec3 dir=vec3(uv*zoom,1.0);\n")
   +string(" float a2=time*speed+.25;\n")
   +string(" float a1=0.0;\n")
   +string(" mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n")
   +string(" mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n")
   +string(" dir.xz*=rot1;\n")
   +string(" dir.xy*=rot2;\n")
   +string(" vec3 from=vec3(0.0,0.0,0.0);\n")
   +string(" from.x-=mouse.x;\n")
   +string(" from.y-=mouse.y;\n")
   +string(" from.xz*=rot1;\n")
   +string(" from.xy*=rot2;\n")
   +string(" //volumetric rendering\n")
   +string(" float _s=0.1,fade=1.0;\n")
   +string(" vec3 v=vec3(0.0);\n")
   +string(" vec3 _p=vec3(0.0);\n")
   +string(" float pa=0.0;\n")
   +string(" float _a=0.0;\n")
   +string(" float dm=0.0;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("    _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*0.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time/10.0))*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time))*fade; fade*=distfading; _s+=stepsize;\n")
   +string(" v=mix(vec3(length(v)),v,saturation); //color adjust\n")
   +string(" gl_FragColor = v_vColour * vec4(v*0.01,texture2D(tex,v_vTexcoord).a); \n")
   +string("}\n")
  ;
  loadShaders(vert.c_str(),frag.c_str());
  InitUniforms();
 } 
 void InitUniforms() {
  Utime=glGetUniformLocation(program, "time");
  Uposition=glGetUniformLocation(program, "mouse");
  Uresolution=glGetUniformLocation(program,"resolution");
  Utex=glGetUniformLocation(program,"tex");
 }
 void UpdateUniforms() {
  glUseProgram(program);
  glUniform1f(Utime, (GLfloat) time.value);
  glUniform2f(Uposition,position.x,position.y);
  glUniform2f(Uresolution,resolution.x,resolution.y);
  // Assign texture IDs used by glActiveTexture
  glUniform1i(Utex, 0);  glActiveTexture(GL_TEXTURE0);	 glBindTexture(GL_TEXTURE_2D, *pTex);
 }
 void Disable() {
  glBindTexture(GL_TEXTURE_2D, 0);
  glUseProgram(0);
 }
};


// Star Nest by Pablo Romn Andrioli
// Modified a lot.
// This content is under the MIT License.

class StarNestSimpleShader : public GLSLShader {
public:
 GLuint *pTex; // Input, background
 Zfloat time;
 Vertex position,resolution;
 GLuint Utime,Uposition,Uresolution,Utex;
 void Init() {
  OUTPUT("StarNestSimpleShader::Loading\n");
 // Simple passthrough vertex shader
  string vert=
    string("#version 120\n")
   +string("#ifdef GL_ES\n")
   +string("precision highp float;\n")  //  string("//precision mediump float;\n")
   +string("#endif\n")
   +string("varying vec2 v_vTexcoord;\n")
   +string("varying vec4 v_vColour;\n")
   +string("uniform sampler2D tex;\n")
   +string("")
   +string("void main() {\n")
   +string(" gl_Position = ftransform();\n")
   +string(" gl_TexCoord[0]=gl_MultiTexCoord0;\n")
   +string(" v_vColour = gl_Color;\n")
   +string(" v_vTexcoord = gl_TexCoord[0].st;\n")
   +string("}\n")
  ;
  string frag=
    string("#version 120\n")
   +string("#ifdef GL_ES\n")
   +string("precision highp float;\n")  //  string("//precision mediump float;\n")
   +string("#endif\n")
   +string("varying vec2 v_vTexcoord;\n")
   +string("varying vec4 v_vColour;\n")
   +string("uniform float time;\n")
   +string("uniform vec2 mouse;\n")
   +string("uniform vec2 resolution;\n")
   +string("uniform sampler2D tex;\n")
   +string("const float  formuparam= 0.530;\n")
   +string("const float  stepsize= 0.120;\n")
   +string("const float  zoom=   1.0;//0.990;\n")
   +string("const float  tile=   0.850;\n")
   +string("const float  speed=  0.0001;\n")
   +string("const float  brightness= 0.0015;\n")
   +string("const float  darkmatter= 0.400;\n")
   +string("const float  distfading= 0.760;\n")
   +string("const float  saturation= 0.800;\n")
   +string("void main(void) {\n")
   +string(" //get coords and direction\n")
   +string(" vec2 uv=v_vTexcoord.xy/resolution.xy-0.5;\n")
   +string(" uv.y*=resolution.y/resolution.x;\n")
   +string(" vec3 dir=vec3(uv*zoom,1.0);\n")
   +string(" float a2=time*speed+.25;\n")
   +string(" float a1=0.0;\n")
   +string(" mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n")
   +string(" mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n")
   +string(" dir.xz*=rot1;\n")
   +string(" dir.xy*=rot2;\n")
   +string(" //from.x-=time;\n")
   +string(" //mouse movement\n")
   +string(" vec3 from=vec3(0.0,0.0,0.0);\n")
   +string(" //from+=vec3(time*2.,time,-2.);\n")
   +string(" from.x-=mouse.x;\n")
   +string(" from.y-=mouse.y;\n")
   +string(" from.xz*=rot1;\n")
   +string(" from.xy*=rot2;\n")
   +string(" //volumetric rendering\n")
   +string(" float _s=0.1,fade=1.0;\n")
   +string(" vec3 v=vec3(0.0);\n")
   +string(" vec3 _p=vec3(0.0);\n")
   +string(" float pa=0.0;\n")
   +string(" float _a=0.0;\n")
   +string(" float dm=0.0;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*0.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time/10.0))*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time))*fade; fade*=distfading; _s+=stepsize;\n")
   +string(" v=mix(vec3(length(v)),v,saturation); //color adjust\n")
   +string(" gl_FragColor = v_vColour * vec4(v*0.01,texture2D(tex,v_vTexcoord).a); \n")
   +string("}\n")
  ;
  loadShaders(vert.c_str(),frag.c_str());
  InitUniforms();
 } 
 void InitUniforms() {
  Utime=glGetUniformLocation(program, "time");
  Uposition=glGetUniformLocation(program, "mouse");
  Uresolution=glGetUniformLocation(program,"resolution");
  Utex=glGetUniformLocation(program,"tex");
 }
 void UpdateUniforms() {
  glUseProgram(program);
  glUniform1f(Utime, (GLfloat) time.value);
  glUniform2f(Uposition,position.x,position.y);
  glUniform2f(Uresolution,resolution.x,resolution.y);
  // Assign texture IDs used by glActiveTexture
  glUniform1i(Utex, 0);  glActiveTexture(GL_TEXTURE0);	 glBindTexture(GL_TEXTURE_2D, *pTex);
 }
 void Disable() {
  glBindTexture(GL_TEXTURE_2D, 0);
  glUseProgram(0);
 }
};


class StarNestSimple2Shader : public GLSLShader {
public:
 GLuint *pTex; // Input, background
 Zfloat time;
 Vertex position,resolution;
 GLuint Utime,Uposition,Uresolution,Utex;
 void Init() {
  OUTPUT("StarNestSimple2Shader::Loading\n");
 // Simple passthrough vertex shader
  string vert=
    string("#version 120\n")
   +string("#ifdef GL_ES\n")
   +string("precision highp float;\n")  //  string("//precision mediump float;\n")
   +string("#endif\n")
   +string("varying vec2 v_vTexcoord;\n")
   +string("varying vec4 v_vColour;\n")
   +string("uniform sampler2D tex;\n")
   +string("")
   +string("void main() {\n")
   +string(" gl_Position = ftransform();\n")
   +string(" gl_TexCoord[0]=gl_MultiTexCoord0;\n")
   +string(" v_vColour = gl_Color;\n")
   +string(" v_vTexcoord = gl_TexCoord[0].st;\n")
   +string("}\n")
  ;
  string frag=
    string("#version 120\n")
   +string("#ifdef GL_ES\n")
   +string("precision highp float;\n")  //  string("//precision mediump float;\n")
   +string("#endif\n")
   +string("varying vec2 v_vTexcoord;\n")
   +string("varying vec4 v_vColour;\n")
   +string("uniform float time;\n")
   +string("uniform vec2 mouse;\n")
   +string("uniform vec2 resolution;\n")
   +string("uniform sampler2D tex;\n")
   +string("const float  formuparam= 0.530;\n")
   +string("const float  stepsize= 0.120;\n")
   +string("const float  zoom=   1.0;//0.990;\n")
   +string("const float  tile=   0.850;\n")
   +string("const float  speed=  0.0001;\n")
   +string("const float  brightness= 0.0015;\n")
   +string("const float  darkmatter= 0.400;\n")
   +string("const float  distfading= 0.760;\n")
   +string("const float  saturation= 0.800;\n")
   +string("void main(void) {\n")
   +string(" //get coords and direction\n")
   +string(" vec2 uv=v_vTexcoord.xy/resolution.xy-0.5;\n")
   +string(" uv.y*=resolution.y/resolution.x;\n")
   +string(" vec3 dir=vec3(uv*zoom,1.0);\n")
   +string(" float a2=time*speed+.25;\n")
   +string(" float a1=0.0;\n")
   +string(" mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));\n")
   +string(" mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));\n")
   +string(" dir.xz*=rot1;\n")
   +string(" dir.xy*=rot2;\n")
   +string(" //mouse movement\n")
   +string(" vec3 from=vec3(0.0,0.0,0.0);\n")
   +string(" from.x-=mouse.x;\n")
   +string(" from.y-=mouse.y;\n")
   +string(" from.xz*=rot1;\n")
   +string(" from.xy*=rot2;\n")
   +string(" //volumetric rendering\n")
   +string(" float _s=0.1,fade=1.0;\n")
   +string(" vec3 v=vec3(0.0);\n")
   +string(" vec3 _p=vec3(0.0);\n")
   +string(" float pa=0.0;\n")
   +string(" float _a=0.0;\n")
   +string(" float dm=0.0;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; //if (r>3) fade*=1.-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*brightness*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*0.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time/10.0))*fade; fade*=distfading; _s+=stepsize;\n")
   +string("  _p=from+_s*dir*0.5;\n")
   +string("  _p = abs(vec3(tile)-mod(_p,vec3(tile*2.0))); // tiling fold\n")
   +string("  _a=0.0; \n")
   +string("  pa=0.0;\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("   _p=abs(_p)/dot(_p,_p)-formuparam; _a+=abs(length(_p)-pa); pa=length(_p);\n")
   +string("  dm=max(0.0,darkmatter-_a*_a*.001); //dark matter\n")
   +string("  _a*=_a*_a*2.0; fade*=1.0-dm; \n")
   +string("  v+=fade; v+=vec3(_s,_s*_s,_s*_s*_s*_s)*_a*(brightness+brightness*sin(time))*fade; fade*=distfading; _s+=stepsize;\n")
   +string(" v=mix(vec3(length(v)),v,saturation); //color adjust\n")
   +string(" gl_FragColor = v_vColour * vec4(v*0.01,texture2D(tex,v_vTexcoord).a); \n")
   +string("}\n")
  ;
  loadShaders(vert.c_str(),frag.c_str());
  InitUniforms();
 } 
 void InitUniforms() {
  Utime=glGetUniformLocation(program, "time");
  Uposition=glGetUniformLocation(program, "mouse");
  Uresolution=glGetUniformLocation(program,"resolution");
  Utex=glGetUniformLocation(program,"tex");
 }
 void UpdateUniforms() {
  glUseProgram(program);
  glUniform1f(Utime, (GLfloat) time.value);
  glUniform2f(Uposition,position.x,position.y);
  glUniform2f(Uresolution,resolution.x,resolution.y);
  // Assign texture IDs used by glActiveTexture
  glUniform1i(Utex, 0);  glActiveTexture(GL_TEXTURE0);	 glBindTexture(GL_TEXTURE_2D, *pTex);
 }
 void Disable() {
  glBindTexture(GL_TEXTURE_2D, 0);
  glUseProgram(0);
 }
};

extern StarNestShader starNestShader;
extern StarNest2Shader starNest2Shader;
extern StarNestSimpleShader starNestSimpleShader;
extern StarNestSimple2Shader starNestSimple2Shader;